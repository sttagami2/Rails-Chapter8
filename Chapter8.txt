学習の目標
本章では、画像の投稿方法について学習します。
現在、投稿できる内容はテキストのみですが、機能を追加することで、画像も投稿できるようになります。

画像を投稿できるようにするには、パッケージ管理ツール「RubyGems（通称 gem：ジェム）」を実装する必要があります。
新しいツールをしっかり使えるようにしましょう。



8章の目次
gemとは
Refileを追加する
Gemfileに追記する
ImageMagickをインストールする
Vagrant環境でインストールする
Cloud9環境でインストールする
bundle installコマンドを実行する
別の画面が表示された場合
読み込めなかった場合の修正方法
image_idカラムを追加する
データベースに反映させる
attachmentメソッドを追加する
Strong Parametersに追加する
画像用のフィールドを追加する
attachment_image_tagを埋め込む
一覧画面（index）に記述する
詳細ページ（show）に記述する
動作を確認する

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
gemとは
「gem：ジェム」は、Rubyでよく使う機能をまとめた管理ツールです。パッケージ化されて配布されています。

Rubyは本体だけでも動作しますが、gemを利用することで、さまざまな機能を簡単に追加できます。
画像投稿機能、ログイン認証機能などもgemによって配布されていますし、そもそも、Ruby on Rails自体もgemです。

何かの機能を1から開発していると、時間がかかります。しかし、gemを使うことで時間を短縮できて、効率的な開発ができるようになります。
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
Refileを追加する
画像投稿用のgemのうち、今回は「Refile：リファイル」を使用します。Refileは、アプリケーション向けのファイル・アップロードのライブラリです。

Refileには、以下のような特徴があります。

画像を簡単に組み込むことができる。
サムネイルを生成できる。
ファイルのアップロード先を設定できる。
gemを使うには、使いたいgem名を「Gemfile」内に追記する必要があります。
Gemfileは、Railsで使うgemを管理するファイルです。gemの名前を追記しておくと、そのgemをRubyから利用できるようになります。
重要なファイルのため、Railsアプリのルートフォルダ（今回はsample_appフォルダ）直下にあります。

Refileを追加するには、以下のように記述します。

Gemfile
	gem "refile", require: "refile/rails", github: 'manfe/refile'
さらに今回は、サイズ調整など画像加工を行うgem（MiniMagick）も追加することにします。
MiniMagickを追加するには、以下のように記述します。 

Gemfile
	gem "refile-mini_magick"

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
Gemfileに追記する
それでは実際に、今回のgemの記述をGemfileに追加していきましょう。Gemfileの一番下に書いてください。

Gemfile
...
 
# 画像投稿用gem
	gem "refile", require: "refile/rails", github: 'manfe/refile'
# 画像加工用（サイズ調整など）gem
	gem "refile-mini_magick"

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
bundle installコマンドを実行する
Gemfileに新たに追加したときは、bundle installコマンドも実行する必要があります。

bundle installは、Gemfileに記述されたgemをインストールするコマンドです。このコマンドを実行することで、はじめてgemが使えるようになります。

$ bundle install
成功すると、以下の画面が表示されます。表示される数値は、異なる場合もあります。



インストールが成功すると、「Bundle complete!……」と表示されます。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

別の画面が表示された場合　
読み込めなかった場合は、以下のようなエラーメッセージが表示されます。

スペルミスの場合は、以下のようなエラーメッセージが表示されます。



全角スペースが入っていた場合は、以下のようなエラーメッセージが表示されます。



必要なgemがインストールされていない場合には、以下のようなエラーメッセージが表示されます。



 

読み込めなかった場合の修正方法
必要なgemがインストールされていなかった場合は、以下の手順で対処してください。



1. 「Make sure that……」以降の該当部分をコピーする。
2. 「sudo」と入力する。
3.  半角スペースを空けて、1.でコピーしたテキストを貼り付ける。
4. Enterキーを押す（コマンドが実行される）。
5.  「bundle install」と入力する。
6. 再びエラーが出たときは、上記の1.～5.を繰り返す。
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
image_idカラムを追加する
画像を保存するためのカラムを追加します。
カラム名は、「image_id」のようにidを付けて設定します。

カラムに追加するマイグレーションファイルを作成し、データベースを変更します。データ型は文字列型です。

$ rails g migration AddImageIdToLists image_id:string
問題がなければ、以下のようになります。



※異なるファイルを作成してしまったときは
異なるファイルを作成した場合は、「rails d migration ……」のように、rails g XXXの「g」の部分を「d」（destory）に変更することで削除できます。
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
データベースに反映させる
マイグレーションファイルを作成できたので、実行してデータベースに反映させます。
マイグレーションファイルは、作成後にコマンドを実行しないとデータベースに反映されません。忘れずに行いましょう。

	$ rails db:migrate

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
attachmentメソッドを追加する
Refileを使うには、attachmentメソッドをモデルに追加する必要があります。Listモデルに以下のように追加します。

attachment（アタッチメント）メソッドとは、refileが指定のカラムにアクセスするために必要です。これによりDBに存在する画像を取得したりアップロードが可能となります。

app/models/list.rb
class List < ApplicationRecord
    attachment :image
end
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
Strong Parametersに追加する
TodolistControllerのStrong Parametersに、imageカラムを追加します。

app/controllers/todolist_controller.rb
class TodolistController < ApplicationController
  def new
    @list = List.new
  end
  def create
    list = List.new(list_params)
    list.save
    redirect_to todolist_path(list.id)
  end
  def index
    @lists = List.all
  end
  def show
    @list = List.find(params[:id])
  end
  def edit
    @list = List.find(params[:id])
  end
  def update
    list = List.find(params[:id])
    list.update(list_params)
    redirect_to todolist_path(list.id)
  end
 
  private
  def list_params
    params.require(:list).permit(:title, :body, :image)
  end
end
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
画像用のフィールドを追加する
投稿フォームに、画像投稿フォームを追加します。

app/views/todolists/new.html.erb
<h1>新規投稿</h1>
<!-- form_for部分 -->
<%= form_for(@list) do |f| %>
 
  <h4>タイトル</h4>
  <%= f.text_field :title %>
 
  <h4>本文</h4>
  <%= f.text_area :body %>
 
  <!-- 追加部分 -->
  <h4>画像</h4>
  <%= f.attachment_field :image %>
 
  <%= f.submit '投稿' %>
 
<% end %>
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
attachment_image_tagを埋め込む
一覧画面と詳細画面に投稿した画像を表示します。
該当箇所にattachment_image_tagを埋め込みます。以下のように記述します。
画像の幅を:fillで指定し、高さをpxで指定しています。また、表示する画像の拡張子をformatで指定しています。

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
一覧画面（index）に記述する
index.html.erbファイルには、以下のように記述します。
Refile特有の書き方ですので使えるようにしましょう。

app/views/todolists/index.html.erb
<h1>投稿一覧</h1>
<% @lists.each do |list| %>
  <p>タイトル</p>
  <span>
    <%=link_to list.title, todolist_path(list.id) %>
  </span>
  <p>画像</p>
  <%= attachment_image_tag list, :image, :fill, 100, 100, format: 'jpeg' %>
<% end %>
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
詳細ページ（show）に記述する
show.html.erbファイルには、以下のように記述します。

app/views/todolists/show.html.erb
<h2>タイトル</h2>
<p><%= @list.title %></p>
<h2>本文</h2>
<p><%= @list.body %></p>
<h2>画像</h2>
<%= attachment_image_tag @list, :image, :fill, 300, 300, format: 'jpeg' %>
 
<%= link_to "編集", edit_todolist_path(@list.id) %>　
これで、画像投稿の実装は完了です。動作を確認しましょう。 
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
動作を確認する
画像が10MB以上のサイズがある場合、画像が表示されないことがあります。
用意した画像が表示されない場合は、以下のサンプル画像をダウンロードして投稿させてみましょう。

サンプル画像



 

$ rails s -b 0.0.0.0でサーバを起動し、http://localhost:3000/todolists/newへアクセスして、画像投稿の結果が表示されるかどうかを確認しましょう。　

問題なく実装できた場合は、以下のようになります。



 
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
RuntimeErrorが表示された場合
RuntimeError画面が表示された場合は、この画面内の「Refile.secret_key……」の部分（シークレットキー）をコピーしてください。



コピーしたシークレットキーを、application_controller_renderer.rbファイルの最後に貼り付けます。
application_controller_renderer.rbファイルは、config/initializersディレクトリにあります。



再びrails s -b 0.0.0.0を実行して、確認してみましょう。
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

 

確認問題
問１
gemについて、間違っているものはどれでしょうか。

a. gemは、簡単に言うと「よく使う機能をまとめたもの」である。
b. gemを使用するには、使用したいgemをGemfileファイル内に追加する必要がある。
c. Gemfileの書き方は「gem gem名」である。
d. Gemfileに新しく追加したときは、gemを読み込むbundle installコマンドを実行する必要がある。
問2
カラムの追加について、正しいものはどれでしょうか。

a. カラムを追加するコマンドは「rails g migration Addカラム名Toテーブル名　カラム名:データ型」である。
b. カラムを追加するコマンドは、同じカラム名がテーブル上にすでに存在していても作成できる。
c. カラムを追加するコマンドは、テーブルが存在していない場合は、自動的にテーブルも作成してくれる。
d. 「rails g migration Addカラム名Toテーブル名 カラム名:データ型」を実行するだけで、すぐにカラムを追加できる。
【解答はこちら】 